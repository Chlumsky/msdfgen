
name: Build MSDFGEN

on:
  push:
    tags:
      - '*' # 仅在新建 tag 时触发
  workflow_dispatch: # 支持手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Enable vcpkg binary caching
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV
        shell: pwsh

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg' # Ensure vcpkg is in a known path
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DMSDFGEN_BUILD_STANDALONE=ON -DMSDFGEN_USE_VCPKG=ON -A x64 -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=${{ github.workspace }}/build/windows/x64
        shell: pwsh

      - name: Build
        run: cmake --build build --config Release
        shell: pwsh

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          name: msdfgen-windows
          path: ${{ github.workspace }}/build/windows/x64/msdfgen.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Enable vcpkg binary caching
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DMSDFGEN_BUILD_STANDALONE=ON \
          -DMSDFGEN_USE_VCPKG=ON \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/linux/x64

      - name: Build
        run: cmake --build build --config Release

      - name: Upload Linux Executable
        uses: actions/upload-artifact@v4
        with:
          name: msdfgen-linux
          path: ${{ github.workspace }}/build/linux/x64/msdfgen

  build-macos-x64:
    runs-on: macos-latest # x64 runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Enable vcpkg binary caching
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DMSDFGEN_BUILD_STANDALONE=ON \
          -DMSDFGEN_USE_VCPKG=ON \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/macos/x64

      - name: Build
        run: cmake --build build --config Release

      - name: Upload macOS x64 Executable
        uses: actions/upload-artifact@v4
        with:
          name: msdfgen-macos-x64
          path: ${{ github.workspace }}/build/macos/x64/msdfgen

  build-macos-arm64:
    runs-on: macos-14 # Apple Silicon (ARM64) runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Enable vcpkg binary caching
        run: echo "VCPKG_BINARY_SOURCES=clear;x-gha,readwrite" >> $GITHUB_ENV

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/vcpkg.json'

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DMSDFGEN_BUILD_STANDALONE=ON \
          -DMSDFGEN_USE_VCPKG=ON \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/build/macos/arm64

      - name: Build
        run: cmake --build build --config Release

      - name: Upload macOS ARM64 Executable
        uses: actions/upload-artifact@v4
        with:
          name: msdfgen-macos-arm64
          path: ${{ github.workspace }}/build/macos/arm64/msdfgen

  create-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [build-windows, build-linux, build-macos-x64, build-macos-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare assets (rename to unique filenames)
        run: |
          set -euo pipefail
          cp artifacts/msdfgen-windows/msdfgen.exe       artifacts/msdfgen-${{ github.ref_name }}-windows-x64.exe
          cp artifacts/msdfgen-linux/msdfgen            artifacts/msdfgen-${{ github.ref_name }}-linux-x64
          cp artifacts/msdfgen-macos-x64/msdfgen        artifacts/msdfgen-${{ github.ref_name }}-macos-x64
          cp artifacts/msdfgen-macos-arm64/msdfgen      artifacts/msdfgen-${{ github.ref_name }}-macos-arm64
          ls -l artifacts

      - name: Create Release (idempotent)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if gh release view "${{ github.ref_name }}" --repo "${{ github.repository }}" >/dev/null 2>&1; then
            echo "Release ${{ github.ref_name }} already exists, skipping create."
          else
            gh release create ${{ github.ref_name }} \
              --repo ${{ github.repository }} \
              --title "MSDFGEN ${{ github.ref_name }}" \
              --generate-notes
          fi

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          gh release upload ${{ github.ref_name }} \
            --repo ${{ github.repository }} \
            artifacts/msdfgen-${{ github.ref_name }}-windows-x64.exe \
            artifacts/msdfgen-${{ github.ref_name }}-linux-x64 \
            artifacts/msdfgen-${{ github.ref_name }}-macos-x64 \
            artifacts/msdfgen-${{ github.ref_name }}-macos-arm64